services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  backend:
    environment:
      - DJANGO_DEBUG=True
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  celery_worker:
    build: .
    command: celery -A backend worker -l info
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy

volumes:
  postgres-data: